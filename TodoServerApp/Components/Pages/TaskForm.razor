﻿
@page "/tasks/add"
@page "/tasks/{Id:int}"

@inject IDataService data
@inject NavigationManager navigate

@if (TaskItem != null)
{
	<EditForm Model="TaskItem" FormName="TaskForm" OnSubmit="ValidSubmit">
		<DataAnnotationsValidator />
		<ValidationSummary />


		<h2>Новая задача</h2>
		<InputNumber @bind-Value="TaskItem.Id" hidden />
		<div class="form-group d-flex justify-content-between m-2">
			<label class="col-form-label col-3">Заголовок</label>
			<InputText @bind-Value="TaskItem.Title" class="form-control" />
		</div>
		<div class="form-group d-flex justify-content-between m-2">
			<label class="col-form-label col-3">Описание</label>
			<InputTextArea @bind-Value="TaskItem.Description" class="form-control" />
		</div>
		<div class="form-group d-flex justify-content-between m-2">
			<label class="col-form-label col-3">Дата окончания</label>
			<InputDate Type="InputDateType.DateTimeLocal" min="@DateTime.Today.ToString("dd-MM-yyyy")" @bind-Value="TaskItem.FinishDate" class="form-control" />
		</div>
		<div class="form-group d-flex justify-content-between m-2">
			<label class="col-form-label col-3">Исполнитель</label>
			<InputSelect class="form-select" aria-label="Default select example" @bind-Value="TaskItem.IdPerformer">
				<option value="">Выберите исполнителя</option>
				@if (performers != null)
				{
					@foreach (var performer in performers)
					{	
						<option value="@performer.Id">
							@performer.Surname @performer.Name @performer.Pantronymic
						</option>
					}
				}
			</InputSelect>
		</div>
		<div class="btn-group">
			<button class="btn btn-primary m-2" type="submit">Сохранить</button>
			<a class="btn btn-primary m-2" href="/">Отмена</a>
		</div>
	</EditForm>
}



@code {
	[Parameter]
	public int Id { get; set; }

	[SupplyParameterFromForm]
	TaskItem? TaskItem { get; set; }
	PerformerItem? PerformerItem { get; set; }

	IEnumerable<PerformerItem>? performers;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		performers = await data.GetAllPerformerAsync(); @*Загружаем список исполнителей*@

		if (TaskItem == null)
		{
			TaskItem = new();
			if (Id != 0)
			{
				var src = await data.GetTaskAsync(Id);
				TaskItem.Id = src.Id;
				TaskItem.Title = src.Title;
				TaskItem.Description = src.Description;
				TaskItem.FinishDate = src.FinishDate;
				TaskItem.IdPerformer = src.IdPerformer;
			}
		}
	}

	async Task ValidSubmit() @*Отправка формы*@
	{
		await data.SaveTaskAsync(TaskItem!); @*Сохранение формы*@
		navigate.NavigateTo("/");
	}

}
