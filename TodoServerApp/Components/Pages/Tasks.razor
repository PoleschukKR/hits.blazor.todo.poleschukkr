@page "/"
@rendermode InteractiveServer
@inject IDataService data
@inject NavigationManager navigate
@attribute [Authorize]
<PageTitle>Задачи</PageTitle>

<h1 class="header">Мои задачи</h1>

<div class="container">
	@if (tasks == null) // если данные не загружены, то прописываем "Loading"
	{
		<tr>
			<td colspan="5">Loading...</td>
		</tr>
	}
	else
	{
		<div class="btn-group m-2">
			<button class="btn btn-primary" @onclick="AddTask">Новая задача</button>
		</div>
		<div class="card-group">
			@foreach (var task in tasks) // если объект tasks не пустой, перебираем в цикле
			{
				<div class="card">

					<div class="card-header">
						@task.Title
					</div>
					<div class="card-body">
						<p>@task.Description</p>
						<p>Дата создания: @task.CreatedDate</p>
						<p>Дата завершения: @task.FinishDate</p>
						@foreach (var performer in performers) @*Перебираем всех исполнителей, если performer.Id = task.IdPerformer, отобр ФИО*@
						{
							@if (performer.Id == task.IdPerformer)
							{
								<p>Исполнитель: @performer.Surname @performer.Name @performer.Pantronymic</p>
							}
						}
					</div>
					@*Управление задачами*@
					<div class="card-footer">
						<a class=" btn btn-primary" href="tasks/@task.Id">Изменить</a>
						<button class="btn btn-primary" @onclick="async () => await DeleteTask(task.Id)">Удалить</button>
					</div>

				</div>
			}
		</div>
	}
</div>
@code {
	IEnumerable<TaskItem>? tasks;

	PerformerItem? PerformerItem { get; set; }
	IEnumerable<PerformerItem>? performers;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		performers = await data.GetAllPerformerAsync();
		tasks = await data.GetAllTasksAsync();
	}

	void AddTask()
	{
		navigate.NavigateTo("tasks/add");
	}

	async Task DeleteTask(int id)
	{
		await data.DeleteTaskAsync(id);
		tasks = await data.GetAllTasksAsync();
	}
}
